%This script is designed to solve the Maxey-Riley equation for a particle
%in the velocity field of a a source-sink pair in a constant flow
%Script name: covid_nonDim
%Author: Ajayi Olayinka Josiah


U= 2.9250;%m/sCharacteristic velocity
L= 0.65;%m Distance of sink from source (Source is located at the origin).
%L is also characteristic length
time= [0 10000000]*U/L;
Q= 1;%m2/sThis is the dimensional flow rate for the source
Q1= Q/(L*U); %This has been nondimensionalized
u0= 0;%m/s dimensional Velocity of constant flow
k_= 10;%m/s The velocity of interest where the particle starts from
k= k_/U;%This the nondimensional k
gamma= u0/U;%This has been nondimensionalized
lambda= Q1/(2*pi);
gy= 0;%m/s2 downward gravitational pull
g= [0 -gy]*L/U^2;%This value has been nondimensionalized.
%Gravity is currently off

rho_p= 1000;%kg/m3 At room temperature
rho_f= 1.184;%kg/m3 At room temperature
a= 10e-6;%m radius of aerosol
nu= 1.562e-5;%m2/s kinematic viscosity of fluid
Re= U*L/nu;%Reynolds number
St= (2/9)*(a/L)^2*Re;%Stokes number
R= 1.5;%2*rho_f/(rho_f + 2*rho_p);%When R= 2/3,<2/3 or >2/3, the particle is buoyant,
%heavy or light respectively
A= R/St;%Stokes drag
beta= 3;%Ratio of sink to source

amount= 21;%Number of particles captured
count=0;
for theta= linspace(0,2*pi,amount)
    count= count + 1;
    %Below is the initial point and velocity
    x1=cos(theta)*lambda/k;
    x2=sin(theta)*lambda/k;
    v1= gamma + lambda*(x1/(x1^2 + x2^2) - beta*(x1 - 1)/(x2^2 + (x1 -...
        1)^2));
    v2= lambda*(x2/(x1^2 + x2^2) - beta*x2/(x2^2 + (x1 - 1)^2));
    
    x0= [x1,v1,x2,v2]';%Intial position and velocity
    G= @(t,x) [x(2); (3*R*((gamma + lambda*(x(1)/(x(1)^2 + x(3)^2) - ...
        beta*(x(1) - 1)/(x(3)^2 + (x(1) - 1)^2)))*lambda*(1/(x(1)^2 + ...
        x(3)^2) - 2*x(1)^2/(x(1)^2 + x(3)^2)^2 - beta/(x(3)^2 + (x(1) - 1)^2)...
        + beta*(x(1) - 1)*(2*x(1) - 2)/(x(3)^2 + (x(1) - 1)^2)^2) + lambda^2*...
        (x(3)/(x(1)^2 + x(3)^2) - beta*x(3)/(x(3)^2 + (x(1) - 1)^2))*(-2*x(1)*...
        x(3)/(x(1)^2 + x(3)^2)^2 + 2*beta*(x(1) - 1)*x(3)/(x(3)^2 + (x(1) ...
        - 1)^2)^2)))/2 - A*x(2) + A*(gamma + lambda*(x(1)/(x(1)^2 + x(3)^2)...
        - beta*(x(1) - 1)/(x(3)^2 + (x(1) - 1)^2))) + (1 - (3*R)/2)*g(1); x(4);...
        (3*R*((gamma + lambda*(x(1)/(x(1)^2 + x(3)^2) - beta*(x(1) - 1)/(x(3)^2 ...
        + (x(1) - 1)^2)))*lambda*(-2*x(1)*x(3)/(x(1)^2 + x(3)^2)^2 + beta*x(3)...
        *(2*x(1) - 2)/(x(3)^2 + (x(1) - 1)^2)^2) + lambda^2*(x(3)/(x(1)^2 ...
        + x(3)^2) - beta*x(3)/(x(3)^2 + (x(1) - 1)^2))*(1/(x(1)^2 + x(3)^2)...
        - 2*x(3)^2/(x(1)^2 + x(3)^2)^2 - beta/(x(3)^2 + (x(1) - 1)^2) ...
        + 2*beta*x(3)^2/(x(3)^2 + (x(1) - 1)^2)^2)))/2 - A*x(4) ...
        + A*lambda*(x(3)/(x(1)^2 + x(3)^2) - beta*x(3)/(x(3)^2 ...
        + (x(1) - 1)^2)) + (1 - (3*R)/2)*g(2) ];
    [t,x]= ode15s(@(t,x) G(t,x),time,x0);%This is the solution to the
    %Maxey-Riley equation
    if count==3%This function solves for the saddle point
        fun= @(xx) [xx(2); (3*R*((gamma + lambda*(xx(1)/(xx(1)^2 ...
            + xx(3)^2) - beta*(xx(1) - 1)/(xx(3)^2 + (xx(1) - 1)^2)))...
            *lambda*(1/(xx(1)^2 + xx(3)^2) - 2*xx(1)^2/(xx(1)^2 + xx(3)^2)^2 ...
            - beta/(xx(3)^2 + (xx(1) - 1)^2) + beta*(xx(1) - 1)*(2*xx(1) - 2)/...
            (xx(3)^2 + (xx(1) - 1)^2)^2) + lambda^2*(xx(3)/(xx(1)^2 + xx(3)^2) ...
            - beta*xx(3)/(xx(3)^2 + (xx(1) - 1)^2))*(-2*xx(1)*xx(3)/(xx(1)^2 ...
            + xx(3)^2)^2 + 2*beta*(xx(1) - 1)*xx(3)/(xx(3)^2 + (xx(1) - ...
            1)^2)^2)))/2 - A*xx(2) + A*(gamma + lambda*(xx(1)/(xx(1)^2 + xx(3)^2)...
            - beta*(xx(1) - 1)/(xx(3)^2 + (xx(1) - 1)^2))) + (1 - (3*R)/2)*g(1);...
            xx(4); (3*R*((gamma + lambda*(xx(1)/(xx(1)^2 + xx(3)^2) - beta*(xx(1)...
            - 1)/(xx(3)^2 + (xx(1) - 1)^2)))*lambda*(-2*xx(1)*xx(3)/(xx(1)^2 ...
            + xx(3)^2)^2 + beta*xx(3)*(2*xx(1) - 2)/(xx(3)^2 + (xx(1) - 1)^2)^2)...
            + lambda^2*(xx(3)/(xx(1)^2 + xx(3)^2) - beta*xx(3)/(xx(3)^2 + (xx(1)...
            - 1)^2))*(1/(xx(1)^2 + xx(3)^2) - 2*xx(3)^2/(xx(1)^2 + xx(3)^2)^2 ...
            - beta/(xx(3)^2 + (xx(1) - 1)^2) + 2*beta*xx(3)^2/(xx(3)^2 + (xx(1) ...
            - 1)^2)^2)))/2 - A*xx(4) + A*lambda*(xx(3)/(xx(1)^2 + xx(3)^2)...
            - beta*xx(3)/(xx(3)^2 + (xx(1) - 1)^2)) + (1 - (3*R)/2)*g(2) ];
        epsilon= 0.01;%This is the solution for the saddle point
        %with an initial guess
        saddle = fsolve(fun,[-epsilon 1 0 1]);
    end
    plot(x(:,1),x(:,3),'-k')
    hold on
end
plot(0,0,'*b',1,0,'*r',saddle(1),saddle(3),'xk')
axis equal
axis([-0.8 1.2 -0.6 0.6])
xlabel('x-axis')
ylabel('y-axis')
title("R= "+ R +", St= "+ St +...
    ", \beta= "+ beta + ", \gamma = "+gamma + ", |g|= "+ abs(g(2)))
